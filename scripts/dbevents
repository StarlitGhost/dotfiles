#!/usr/bin/env python3

import argparse
import csv
import datetime
import os
import pathlib
import random
import re
import requests
import sys

from typing import Dict, List

latestDB = datetime.datetime.utcnow().year - 2006


def loadCSV(content: str) -> List[List[str]]:
    cr = csv.reader(content.splitlines(), delimiter=',', quotechar='"')
    if cr:
        return list(cr)


def fetchDayLog(year: int, day: int, force_fetch: bool, no_fetch: bool) -> List[str]:
    url = f"https://vst.ninja/DB{year}/synced_data/day{day}.csv"

    path = os.path.join(os.path.expanduser('~'), '.cache', 'dbevents')
    pathlib.Path(path).mkdir(parents=True, exist_ok=True)
    fname = os.path.join(path, f"DB{year}_D{day}.csv")
    if os.path.exists(fname) and not force_fetch:
        # sys.stdout.write(f"\r{fname} exists, skipped")
        with open(fname, "r") as f:
            # print(f"loading {fname} from disk")
            return loadCSV(f.read())

    if no_fetch:
        return

    # sys.stdout.write(f"\rFetching DB{year} - D{day} ...")
    csv = requests.get(url)
    if not csv:
        return

    with open(fname, "wb") as f:
        f.write(csv.content)
        # print(f"loading {fname} from web")
    with open(fname, "r") as f:
        return loadCSV(f.read())

    sys.stdout.flush()


def fetchYearLogs(year: int, force_fetch: bool, no_fetch: bool, video: bool):
    logs = []

    for day in range(0, 7+1):
        log = fetchDayLog(year, day, force_fetch, no_fetch)
        if log:
            new_log = []
            for row, line in enumerate(log):
                if (video and line[-1]) or not video:
                    new_line = [f"DB{year}", f"Day {day}", f"Row {row}"] + line
                    new_log.append(new_line)

            if new_log:
                logs.append(new_log)

    return logs


def fetchAllLogs(force_fetch: bool, no_fetch: bool, video: bool) -> Dict[int, List[List[str]]]:
    logs = {}

    for year in range(1, latestDB+1):
        year_log = fetchYearLogs(year, force_fetch, no_fetch, video)
        if year_log:
            logs[year] = year_log

    return logs

def printLine(line: List[str], pretty: bool):
    if not pretty:
        print(', '.join(line))
        return

    year = line[0]
    day = line[1]
    row = line[2]
    start = line[3]
    end = line[4]
    _type = line[5]
    event = line[6]
    uhh = line[7]
    hmm = line[8]
    idk = line[9]
    video = re.sub('www\.youtube\.com/watch\?v=', 'youtu.be/', line[10])
    
    print(f"{_type}: {event}\n\n-- {year}, {day}, {start}..{end} {video}")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="DesertBus VST event log tool")
    parser.add_argument('-y', '--year', type=int,
                        default=latestDB, choices=range(1, latestDB+1),
                        help="A specific year, the latest if omitted")
    parser.add_argument('-a', '--all', action='store_true',
                        help="All years")
    parser.add_argument('-v', '--video', action='store_true',
                        help="Only lines with videos")
    # parser.add_argument('-t', '--tech-test', action='store_true')
    parser.add_argument('-f', '--force-fetch', action='store_true',
                        help="Force a refresh from VST servers")
    parser.add_argument('-F', '--no-fetch', action='store_true',
                        help="Disable fetching from VST servers")
    parser.add_argument('-r', '--random', action='store_true',
                        help="Pick a single random event")
    parser.add_argument('-p', '--pretty', action='store_true',
                        help="Pretty-print events")
    args = parser.parse_args()

    if args.all:
        logs = fetchAllLogs(args.force_fetch, args.no_fetch, args.video)
        if args.random:
            year = random.choice(list(logs.values()))
            day = random.choice(year)
            line = random.choice(day)
            printLine(line, args.pretty)
        else:
            for year, log in logs.items():
                for day in log:
                    for line in day:
                        printLine(line, args.pretty)
    else: # year
        logs = fetchYearLogs(args.year, args.force_fetch, args.no_fetch, args.video)
        if args.random:
            day = random.choice(logs)
            line = random.choice(day)
            printLine(line, args.pretty)
        else:
            for day in logs:
                for line in day:
                    printLine(line, args.pretty)
