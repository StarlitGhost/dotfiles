#!/usr/bin/env python

# converted and modified from http://errtheblog.com/posts/89-huba-huba

import os
import errno
import stat

home = os.getenv('HOME', os.path.expanduser('~'))

dotfiles_dir = os.path.dirname(os.path.abspath(__file__))
os.chdir(dotfiles_dir)

def symlink(source, target):
    try:
        os.symlink(source, target)
        print('{} symlink created'.format(target))
    except OSError as e:
        if e.errno == errno.EEXIST:
            if os.path.islink(target):
                current_source = os.readlink(target)
                if current_source == source:
                    pass # we already symlinked our file
                else:
                    print(f'!!! {target} is already a symlink, '
                          f'but points to {current_source} - not {source}')
            else:
                print(f'!!! {target} already exists, symlink not created')
            # TODO: it would be nice to make this interactive, like a git merge
            #       with whatever is already there, then delete and symlink
        else:
            raise e

def install():
    for fname in os.listdir(dotfiles_dir):
        # skip over these
        if fname in ['install',
                     'ignored',
                     'scripts',
                     'config', # handled separately
                     'README.md',
                     'LICENSE.txt']:
            continue
        # skip over dotfiles within .dotfiles (.gitignore, etc)
        if fname.startswith('.'): continue

        # remove .zsh when creating the symlinks
        target, ext = os.path.splitext(fname)
        if ext != '.zsh':
            target = fname

        target = os.path.join(home, '.{}'.format(target))

        fpath = os.path.abspath(fname)

        symlink(fpath, target)

def install_config():
    config_dir = os.path.join(dotfiles_dir, 'config')
    os.chdir(config_dir)
    for fname in os.listdir(config_dir):
        fpath = os.path.abspath(fname)
        target = os.path.join(home, '.config', fname)
        #print(f'{target} -> {fpath}')
        symlink(fpath, target)

install()
install_config()

# git push on commit
post_commit = os.path.join(dotfiles_dir, '.git/hooks/post-commit')
with open(post_commit, mode='w') as f:
    f.write('git push')
os.chmod(post_commit, 0o755)
